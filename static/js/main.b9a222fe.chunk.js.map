{"version":3,"sources":["components/sectionBar/rectangle/rectangle.js","components/sectionBar/label/label.js","components/sectionBar/sectionBar.js","components/Input/Input.js","container/progressBar/progressBar.js","App.js","serviceWorker.js","index.js"],"names":["Rectangle","props","sectionZones","map","zone","key","color","x","width","height","fill","label","labels","i","style","marginLeft","position","top","Section","concat","className","mainWidth","type","min","max","readOnly","value","values","step","id","viewBox","xmlns","section","input","placeholder","onChange","changeHandler","ProgressBar","state","data","zones","mainHeight","isLoaded","items","event","inputValue","target","setState","fetch","response","json","dataBar","this","currentValue","minValue","maxValue","staticLabels","staticZones","sectionBar","currentData","sectorZones","slice","reverse","start","strokeStyle","gettheWidth","Input","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b9a222fe.chunk.js","sourcesContent":["import React from 'react'\n\n\n\nconst Rectangle = (props) => {\n    \n    return(\n        <svg>\n            {props.sectionZones.map(zone => (\n                <svg key={zone.color}>\n                    <rect x=\"0\" width={zone.width} height={props.height} fill={zone.color} />\n                </svg> \n            ))}\n        </svg>\n    );\n}\n\nexport default Rectangle;","import React from \"react\"\n\nconst label = (props) => {\n    return (\n        <div>\n            \n            {props.labels.map((label,i) =>(\n                    <div key={i}>\n                        {/* {console.log(props.position[3-i])} */}\n                        <p style={{marginLeft : `${props.position[3-i]}px`, position : 'absolute',top : '0'}}>\n                            {label}\n                        </p>\n                    </div>\n                ))\n            }\n        </div>        \n    )\n}\n\nexport default label","import React from \"react\"\nimport './sectionBar.css'\nimport Rectangle from './rectangle/rectangle'\nimport Label from './label/label'\n\n\nconst Section = (props) =>{\n    let zone = props.sectionZones.map(zone => {\n        return (\n            zone.width + 25\n        )\n    });\n    zone = zone.concat(25)\n    \n    return(\n        <div className=\"section\">\n            <input style={{width: props.mainWidth + 62}} type=\"range\" min=\"1\" max=\"100\" readOnly={true} value={props.values}  step=\"1\" className=\"slider\" id=\"myRange\" ></input>\n            <svg width={props.mainWidth} height={props.height} viewBox={`0 0 ${props.mainWidth} ${props.height}`} fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <Rectangle \n                    mainWidth={props.mainWidth}\n                    sectionZones={props.sectionZones}\n                    height={props.height}/>\n            </svg>\n            <label className=\"labels\">\n                <Label \n                    labels={props.section}\n                    position={zone}/>\n            </label>\n        </div>\n    );\n    \n}\n\nexport default Section\n\n            ","import React from \"react\";\n\n\nconst input = (props) => {\n    \n    return(\n        <div>\n            <label>\n                ValuePointer:\n                <input placeholder=\"Enter the values\" onChange={props.changeHandler}  type=\"number\"/>\n            </label>\n        </div>\n    );\n}\n\nexport default input;","import React , {Component} from 'react';\nimport './progressBar.css';\nimport Section from '../../components/sectionBar/sectionBar';\nimport Input from '../../components/Input/Input';\n\n\nclass ProgressBar extends Component {\n\n    state = {\n        data : null,\n        max : null,\n        min : null,\n        labels : null,\n        zones : null,\n        mainWidth : null,\n        mainHeight: null,\n        isLoaded : false,\n        items : null\n    };  \n\n    async componentDidMount (){\n        const url = \"https://ac8d418a-14cf-41a4-908a-4a803dc878ab.mock.pstmn.io/demo/bar\";\n        const response = await fetch(url);\n        const dataBar = await response.json();\n        // console.log(dataBar);\n        this.setState({\n            items : dataBar,\n            data : dataBar.currentValue,\n            min : dataBar.minValue,\n            max : dataBar.maxValue,\n            labels : dataBar.staticLabels.labels,\n            mainWidth : dataBar.mainWidth,\n            zones : dataBar.staticZones,\n            mainHeight : dataBar.mainHeight,\n            isLoaded : true\n        });\n    }\n\n    changeHandler = (event) => {\n        const inputValue = event.target.value\n        this.setState({data : inputValue});\n    }\n    gettheWidth (max , min , mainWidth) {\n        const divisons = (this.state.max - this.state.min);\n        const difference = max - min;\n        let width = ((difference * mainWidth)/divisons)\n        return width;\n    }\n\n    render(){\n        let sectionBar = <div><h3>Loading...</h3></div>\n        let currentData = (((this.state.data - this.state.min)*100)/(this.state.max - this.state.min)+1);\n        if (this.state.isLoaded){\n            const sectorZones = this.state.zones.slice(0).reverse().map((zone , i) => {\n                return{\n                    start : 0,\n                    color : zone.strokeStyle,\n                    width : this.gettheWidth(zone.max , this.state.min , this.state.mainWidth),\n                }\n            })\n            sectionBar = (\n                <Section \n                    values={currentData}\n                    max = {this.state.max}\n                    min = {this.state.min}\n                    section={this.state.labels}\n                    mainWidth={this.state.mainWidth}\n                    sectionZones={sectorZones}\n                    height={this.state.mainHeight}/>\n            )\n        }\n        return(\n            <div className=\"Bar\">\n                {sectionBar}\n                <Input changeHandler={this.changeHandler} />\n            </div>\n        );\n    }\n}\n\nexport default ProgressBar;","import React , {Component} from 'react';\nimport './App.css';\nimport ProgressBar from './container/progressBar/progressBar';\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <ProgressBar />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}